---
# yamllint disable rule:line-length
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-tekton-dashboard
spec:
  params:
    - name: versionTag
      description: The vX.Y.Z version that the artifacts should be tagged with (including `v`)
    - name: imageRegistry
      description: The target image registry
      default: gcr.io
    - name: releaseAsLatest
      description: Whether to tag and publish this release as the latest
      default: "true"
    - name: package
      description: package to release (e.g. github.com/<org>/<project>)
      default: github.com/tektoncd/dashboard
    - name: images
      description: List of cmd/* paths to be published as images  in release manifest release.yaml
      default: "dashboard"
    - name: imageRegistryPath
      description: The path (project) in the image registry
    - name: imageRegistryRegions
      description: The target image registry regions
      default: "us eu asia"
    - name: platforms
      description: Platforms to publish for the images (e.g. linux/amd64,linux/arm64)
      default: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
    - name: serviceAccountPath
      description: The name of the service account path within the release-secret workspace
  workspaces:
    - name: source
      description: >-
      mountPath: /go/src/github.com/tektoncd/dashboard
    - name: release-secret
      description: The secret that contains a service account authorized to push to the imageRegistry and to the output bucket
    - name: output
      description: The release YAML will be written to this workspace
  stepTemplate:
    env:
      - name: PROJECT_ROOT
        value: "$(workspaces.source.path)"
      - name: CONTAINER_REGISTY_CREDENTIALS
        value: "$(workspaces.release-secret.path)/$(params.serviceAccountPath)"
      - name: CONTAINER_REGISTRY
        value: "$(params.imageRegistry)/$(params.imageRegistryPath)"
      - name: REGIONS
        value: "$(params.imageRegistryRegions)"
      - name: OUTPUT_RELEASE_DIR
        value: "$(workspaces.output.path)/$(params.versionTag)"
      - name: HOME
        value: /tekton/home
  steps:
    - name: container-registy-auth
      image: gcr.io/go-containerregistry/crane:debug
      script: |
        #!/busybox/sh
        set -ex
        # Login to the container registry
        DOCKER_CONFIG=$(cat ${CONTAINER_REGISTY_CREDENTIALS} | \
          crane auth login -u _json_key --password-stdin $(params.imageRegistry) 2>&1 | \
          sed 's,^.*logged in via \(.*\)$,\1,g')
        # Auth with account credentials for all regions.
        for region in ${REGIONS}
        do
          HOSTNAME=${region}.$(params.imageRegistry)
          cat ${CONTAINER_REGISTY_CREDENTIALS} | crane auth login -u _json_key --password-stdin ${HOSTNAME}
        done
        cp ${DOCKER_CONFIG} /workspace/docker-config.json

    - name: dashboard-run-ko
      # TODO(#639) we should be able to use the image built by an upstream Task here instead of hardcoding
      # Want to use your own plumbing image? Change this
      image: gcr.io/tekton-releases/dogfooding/ko-gcloud:latest
      imagePullPolicy: Always
      workingDir: /workspace/source-repo/git
      env:
        - name: KO_DOCKER_REPO
          value: $(params.imageRegistry)/$(params.imageRegistryPath)
        - name: GOPATH
          value: /go
        - name: GO111MODULE
          value:
      command:
        - /bin/sh
      args:
        - -ce
        - |
          set -e
          set -x
          pwd

          # Setup docker-auth
          DOCKER_CONFIG=~/.docker
          mkdir -p ${DOCKER_CONFIG}
          cp /workspace/docker-config.json ${DOCKER_CONFIG}/config.json
          # Change to directory with our .ko.yaml
          cd ${PROJECT_ROOT}
          echo ${PROJECT_ROOT}
          find . -maxdepth 1

          # Rewrite "devel" to params.versionTag
          sed -i 's/devel/$(params.versionTag)/g' ${PROJECT_ROOT}/base/300-deployment.yaml
          sed -i 's/devel/$(params.versionTag)/g' ${PROJECT_ROOT}/base/300-service.yaml
          sed -i 's/devel/$(params.versionTag)/g' /workspace/go/src/github.com/tektoncd/dashboard/base/config-info.yaml

          # Publish images and create release.yamls
          which ko # Tested with 0.2.0
          ko version
          kustomize version # Tested with 3.5.4

          mkdir -p $OUTPUT_RELEASE_DIR

          # build manifests for installer
          kustomize build overlays/installer/read-write --load_restrictor=LoadRestrictionsNone        | ko resolve --platform=$(params.platforms) -t $(params.versionTag) --preserve-import-paths -f - > ${OUTPUT_RELEASE_DIR}/installer-tekton-dashboard-release.yaml
          kustomize build overlays/installer/read-only  --load_restrictor=LoadRestrictionsNone        | ko resolve --platform=$(params.platforms) -t $(params.versionTag) --preserve-import-paths -f - > ${OUTPUT_RELEASE_DIR}/installer-tekton-dashboard-release-readonly.yaml

          # add installer script in the release
          cp ${PROJECT_ROOT}/scripts/installer ${OUTPUT_RELEASE_DIR}/installer
          echo ::::::::::::::::::::::
          ./scripts/installer release --debug                         --output ${OUTPUT_RELEASE_DIR}/tekton-dashboard-release.yaml
          ./scripts/installer release --debug --read-only             --output ${OUTPUT_RELEASE_DIR}/tekton-dashboard-release-readonly.yaml
          ./scripts/installer release --debug --openshift             --output ${OUTPUT_RELEASE_DIR}/openshift-tekton-dashboard-release.yaml
          ./scripts/installer release --debug --openshift --read-only --output ${OUTPUT_RELEASE_DIR}/openshift-tekton-dashboard-release-readonly.yaml
          echo :::::::::::: END :::::::::

    - name: koparse
      image: gcr.io/tekton-releases/dogfooding/koparse:latest
      script: |
        set -ex
        IMAGES_PATH=${CONTAINER_REGISTRY}/$(params.package)
        for cmd in $(params.images)
        do
          IMAGES="${IMAGES} ${IMAGES_PATH}/cmd/${cmd}"
        done
        # Parse the built images from the release.yaml generated by ko
        koparse \
          --path $OUTPUT_RELEASE_DIR/tekton-dashboard-release.yaml \
          --base ${IMAGES_PATH} --images ${IMAGES} > /workspace/built_images
    - name: tag-images
      image: gcr.io/go-containerregistry/crane:debug
      script: |
        #!/busybox/sh
        set -ex

        # Setup docker-auth
        DOCKER_CONFIG=~/.docker
        mkdir -p ${DOCKER_CONFIG}
        cp /workspace/docker-config.json ${DOCKER_CONFIG}/config.json
        REGIONS="us eu asia"

        # Tag the images and put them in all the regions
        for IMAGE in $(cat /workspace/built_images)
        do
          IMAGE_WITHOUT_SHA=${IMAGE%%@*}
          IMAGE_WITHOUT_SHA_AND_TAG=${IMAGE_WITHOUT_SHA%%:*}
          IMAGE_WITH_SHA=${IMAGE_WITHOUT_SHA_AND_TAG}@${IMAGE##*@}
          if [[ "$(params.releaseAsLatest)" == "true" ]]
          then
            crane cp ${IMAGE_WITH_SHA} ${IMAGE_WITHOUT_SHA_AND_TAG}:latest
          fi
          for REGION in ${REGIONS}
          do
            if [[ "$(params.releaseAsLatest)" == "true" ]]
            then
              for TAG in "latest" $(params.versionTag)
              do
                crane cp ${IMAGE_WITH_SHA} ${REGION}.${IMAGE_WITHOUT_SHA_AND_TAG}:$TAG
              done
            else
              TAG="$(params.versionTag)"
              crane cp ${IMAGE_WITH_SHA} ${REGION}.${IMAGE_WITHOUT_SHA_AND_TAG}:$TAG
            fi
          done
        done
